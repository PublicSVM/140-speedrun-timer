# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  branches:
    include:
    - refs/heads/*
    - refs/tags/*
  paths:
    exclude:
    - README.md
    - latestVersion.txt

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/tags/')) }}:
    versionName: $(Build.SourceVersion)
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/tags/') }}:
    versionName: $(Build.SourceBranchName)
  installerBaseFileName: speedrun-timer-installer_$(versionName)
  ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v')) }}:
    buildConfiguration: 'Experimental'
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/tags/v') }}:
    buildConfiguration: 'Release'


jobs:
- job: Test
  pool:
    vmImage: 'VS2017-Win2016'
  steps:
  - task: NuGetToolInstaller@0
  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'

  - task: VSBuild@1
    displayName: Build solution
    inputs:
      solution: '$(solution)'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(system.defaultworkingdirectory)/140-speedrun-timer/bin'
      artifactName: 'bin' # hack
      publishLocation: 'Container'

- job: Deploy
#  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
  dependsOn:
    - Test

  pool:
    vmImage: 'VS2017-Win2016'

  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: 'bin'
      downloadPath: '$(System.DefaultWorkingDirectory)/140-speedrun-timer'

  - task: DotNetCoreCLI@2
    displayName: 'Publish windows installer'
    inputs:
      command: publish
      projects: '**/*.csproj'
      arguments: '-r win-x64 -c Release -f netcoreapp2.1'

  - task: DotNetCoreCLI@2
    displayName: 'Publish osx installer'
    inputs:
      command: publish
      projects: '**/*.csproj'
      arguments: '-r osx-x64 -c Release -f netcoreapp2.1'

  - task: DotNetCoreCLI@2
    displayName: 'Publish windows installer'
    inputs:
      command: publish
      projects: '**/*.csproj'
      arguments: '-r linux-x64 -c Release -f netcoreapp2.1'

  - bash: ls -lR "$(Build.SourcesDirectory)"
  - bash: ls -lR "$(System.ArtifactsDirectory)"

  - task: GitHubRelease@0
    inputs:
      gitHubConnection: 'GitHub connection 1'
      repositoryName: '$(Build.Repository.Name)'
      action: 'create'
      target: '$(Build.SourceVersion)'
      title: '$(Build.SourceBranchName)'
      tagSource: auto
      isDraft: true
      assets: $(System.ArtifactsDirectory)/**/*
